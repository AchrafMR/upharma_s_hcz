(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_bpnetguy_webpack-inject-plugin_dist_webpack-inject-plugin_loader_js_id_webpack-i-327ca7"],{

/***/ "./node_modules/@bpnetguy/webpack-inject-plugin/dist/webpack-inject-plugin.loader.js?id=webpack-inject-module-1!":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@bpnetguy/webpack-inject-plugin/dist/webpack-inject-plugin.loader.js?id=webpack-inject-module-1! ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var fos_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fos-router */ "./vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.js");
/* harmony import */ var fos_router__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fos_router__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var C_Users_ThinkPad_Desktop_new_upharma_upharma_s_hcz_var_cache_fosRoutes_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./var/cache/fosRoutes.json */ "./var/cache/fosRoutes.json");
fos_router__WEBPACK_IMPORTED_MODULE_0___default().setRoutingData(C_Users_ThinkPad_Desktop_new_upharma_upharma_s_hcz_var_cache_fosRoutes_json__WEBPACK_IMPORTED_MODULE_1__);

/***/ }),

/***/ "./vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.js":
/*!********************************************************************************!*\
  !*** ./vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.js ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.object.freeze.js */ "./node_modules/core-js/modules/es.object.freeze.js");
__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");
__webpack_require__(/*! core-js/modules/es.regexp.dot-all.js */ "./node_modules/core-js/modules/es.regexp.dot-all.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.regexp.sticky.js */ "./node_modules/core-js/modules/es.regexp.sticky.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
__webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
__webpack_require__(/*! core-js/modules/es.error.to-string.js */ "./node_modules/core-js/modules/es.error.to-string.js");
__webpack_require__(/*! core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");
__webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
__webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
(function (root, factory) {
  var routing = factory();
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (routing.Routing),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  var exports = {};
  "use strict";
  exports.__esModule = true;
  exports.Routing = exports.Router = void 0;
  var Router = /** @class */function () {
    function Router(context, routes) {
      this.context_ = context || {
        base_url: '',
        prefix: '',
        host: '',
        port: '',
        scheme: '',
        locale: ''
      };
      this.setRoutes(routes || {});
    }
    Router.getInstance = function () {
      return exports.Routing;
    };
    Router.setData = function (data) {
      var router = Router.getInstance();
      router.setRoutingData(data);
    };
    Router.prototype.setRoutingData = function (data) {
      this.setBaseUrl(data['base_url']);
      this.setRoutes(data['routes']);
      if (typeof data.prefix !== 'undefined') {
        this.setPrefix(data['prefix']);
      }
      if (typeof data.port !== 'undefined') {
        this.setPort(data['port']);
      }
      if (typeof data.locale !== 'undefined') {
        this.setLocale(data['locale']);
      }
      this.setHost(data['host']);
      if (typeof data.scheme !== 'undefined') {
        this.setScheme(data['scheme']);
      }
    };
    Router.prototype.setRoutes = function (routes) {
      this.routes_ = Object.freeze(routes);
    };
    Router.prototype.getRoutes = function () {
      return this.routes_;
    };
    Router.prototype.setBaseUrl = function (baseUrl) {
      this.context_.base_url = baseUrl;
    };
    Router.prototype.getBaseUrl = function () {
      return this.context_.base_url;
    };
    Router.prototype.setPrefix = function (prefix) {
      this.context_.prefix = prefix;
    };
    Router.prototype.setScheme = function (scheme) {
      this.context_.scheme = scheme;
    };
    Router.prototype.getScheme = function () {
      return this.context_.scheme;
    };
    Router.prototype.setHost = function (host) {
      this.context_.host = host;
    };
    Router.prototype.getHost = function () {
      return this.context_.host;
    };
    Router.prototype.setPort = function (port) {
      this.context_.port = port;
    };
    Router.prototype.getPort = function () {
      return this.context_.port;
    };
    ;
    Router.prototype.setLocale = function (locale) {
      this.context_.locale = locale;
    };
    Router.prototype.getLocale = function () {
      return this.context_.locale;
    };
    ;
    /**
     * Builds query string params added to a URL.
     * Port of jQuery's $.param() function, so credit is due there.
     */
    Router.prototype.buildQueryParams = function (prefix, params, add) {
      var _this = this;
      var name;
      var rbracket = new RegExp(/\[\]$/);
      if (params instanceof Array) {
        params.forEach(function (val, i) {
          if (rbracket.test(prefix)) {
            add(prefix, val);
          } else {
            _this.buildQueryParams(prefix + '[' + (_typeof(val) === 'object' ? i : '') + ']', val, add);
          }
        });
      } else if (_typeof(params) === 'object') {
        for (name in params) {
          this.buildQueryParams(prefix + '[' + name + ']', params[name], add);
        }
      } else {
        add(prefix, params);
      }
    };
    /**
     * Returns a raw route object.
     */
    Router.prototype.getRoute = function (name) {
      var prefixedName = this.context_.prefix + name;
      var sf41i18nName = name + '.' + this.context_.locale;
      var prefixedSf41i18nName = this.context_.prefix + name + '.' + this.context_.locale;
      var variants = [prefixedName, sf41i18nName, prefixedSf41i18nName, name];
      for (var i in variants) {
        if (variants[i] in this.routes_) {
          return this.routes_[variants[i]];
        }
      }
      throw new Error('The route "' + name + '" does not exist.');
    };
    /**
     * Generates the URL for a route.
     */
    Router.prototype.generate = function (name, opt_params, absolute) {
      var route = this.getRoute(name);
      var params = opt_params || {};
      var unusedParams = Object.assign({}, params);
      var url = '';
      var optional = true;
      var host = '';
      var port = typeof this.getPort() == 'undefined' || this.getPort() === null ? '' : this.getPort();
      route.tokens.forEach(function (token) {
        if ('text' === token[0] && typeof token[1] === 'string') {
          url = Router.encodePathComponent(token[1]) + url;
          optional = false;
          return;
        }
        if ('variable' === token[0]) {
          if (token.length === 6 && token[5] === true) {
            // Sixth part of the token array indicates if it should be included in case of defaults
            optional = false;
          }
          var hasDefault = route.defaults && !Array.isArray(route.defaults) && typeof token[3] === 'string' && token[3] in route.defaults;
          if (false === optional || !hasDefault || typeof token[3] === 'string' && token[3] in params && !Array.isArray(route.defaults) && params[token[3]] != route.defaults[token[3]]) {
            var value = void 0;
            if (typeof token[3] === 'string' && token[3] in params) {
              value = params[token[3]];
              delete unusedParams[token[3]];
            } else if (typeof token[3] === 'string' && hasDefault && !Array.isArray(route.defaults)) {
              value = route.defaults[token[3]];
            } else if (optional) {
              return;
            } else {
              throw new Error('The route "' + name + '" requires the parameter "' + token[3] + '".');
            }
            var empty = true === value || false === value || '' === value;
            if (!empty || !optional) {
              var encodedValue = Router.encodePathComponent(value);
              if ('null' === encodedValue && null === value) {
                encodedValue = '';
              }
              url = token[1] + encodedValue + url;
            }
            optional = false;
          } else if (hasDefault && typeof token[3] === 'string' && token[3] in unusedParams) {
            delete unusedParams[token[3]];
          }
          return;
        }
        throw new Error('The token type "' + token[0] + '" is not supported.');
      });
      if (url === '') {
        url = '/';
      }
      route.hosttokens.forEach(function (token) {
        var value;
        if ('text' === token[0]) {
          host = token[1] + host;
          return;
        }
        if ('variable' === token[0]) {
          if (token[3] in params) {
            value = params[token[3]];
            delete unusedParams[token[3]];
          } else if (route.defaults && !Array.isArray(route.defaults) && token[3] in route.defaults) {
            value = route.defaults[token[3]];
          }
          host = token[1] + value + host;
        }
      });
      url = this.context_.base_url + url;
      if (route.requirements && '_scheme' in route.requirements && this.getScheme() != route.requirements['_scheme']) {
        var currentHost = host || this.getHost();
        url = route.requirements['_scheme'] + '://' + currentHost + (currentHost.indexOf(':' + port) > -1 || '' === port ? '' : ':' + port) + url;
      } else if ('undefined' !== typeof route.schemes && 'undefined' !== typeof route.schemes[0] && this.getScheme() !== route.schemes[0]) {
        var currentHost = host || this.getHost();
        url = route.schemes[0] + '://' + currentHost + (currentHost.indexOf(':' + port) > -1 || '' === port ? '' : ':' + port) + url;
      } else if (host && this.getHost() !== host + (host.indexOf(':' + port) > -1 || '' === port ? '' : ':' + port)) {
        url = this.getScheme() + '://' + host + (host.indexOf(':' + port) > -1 || '' === port ? '' : ':' + port) + url;
      } else if (absolute === true) {
        url = this.getScheme() + '://' + this.getHost() + (this.getHost().indexOf(':' + port) > -1 || '' === port ? '' : ':' + port) + url;
      }
      if (Object.keys(unusedParams).length > 0) {
        var queryParams_1 = [];
        var add = function add(key, value) {
          // if value is a function then call it and assign it's return value as value
          value = typeof value === 'function' ? value() : value;
          // change null to empty string
          value = value === null ? '' : value;
          queryParams_1.push(Router.encodeQueryComponent(key) + '=' + Router.encodeQueryComponent(value));
        };
        for (var prefix in unusedParams) {
          if (unusedParams.hasOwnProperty(prefix)) {
            this.buildQueryParams(prefix, unusedParams[prefix], add);
          }
        }
        url = url + '?' + queryParams_1.join('&');
      }
      return url;
    };
    /**
     * Returns the given string encoded to mimic Symfony URL generator.
     */
    Router.customEncodeURIComponent = function (value) {
      return encodeURIComponent(value).replace(/%2F/g, '/').replace(/%40/g, '@').replace(/%3A/g, ':').replace(/%21/g, '!').replace(/%3B/g, ';').replace(/%2C/g, ',').replace(/%2A/g, '*').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/'/g, '%27');
    };
    /**
     * Returns the given path properly encoded to mimic Symfony URL generator.
     */
    Router.encodePathComponent = function (value) {
      return Router.customEncodeURIComponent(value).replace(/%3D/g, '=').replace(/%2B/g, '+').replace(/%21/g, '!').replace(/%7C/g, '|');
    };
    /**
     * Returns the given query parameter or value properly encoded to mimic Symfony URL generator.
     */
    Router.encodeQueryComponent = function (value) {
      return Router.customEncodeURIComponent(value).replace(/%3F/g, '?');
    };
    return Router;
  }();
  exports.Router = Router;
  exports.Routing = new Router();
  exports["default"] = exports.Routing;
  return {
    Router: exports.Router,
    Routing: exports.Routing
  };
});

/***/ }),

/***/ "./var/cache/fosRoutes.json":
/*!**********************************!*\
  !*** ./var/cache/fosRoutes.json ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"base_url":"","routes":{"app_login":{"tokens":[["text","/login"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":[],"schemes":[]},"app_logout":{"tokens":[["text","/logout"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":[],"schemes":[]},"app_settings_module_list":{"tokens":[["text","/setting/module/list"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":[],"schemes":[]},"app_settings_module_add":{"tokens":[["text","/setting/module/add"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":[],"schemes":[]},"app_settings_module_toggle_active":{"tokens":[["variable","/","[^/]++","module",true],["text","/setting/module/activer"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":[],"schemes":[]},"app_settings_sousmodule_list":{"tokens":[["text","/setting/sousmodule/list"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":[],"schemes":[]},"app_settings_sousmodule_add":{"tokens":[["text","/setting/sousmodule/add"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":[],"schemes":[]},"app_settings_sousmodule_toggle_active":{"tokens":[["variable","/","[^/]++","sousmodule",true],["text","/setting/sousmodule/activer"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":[],"schemes":[]},"app_assign_convention":{"tokens":[["text","/user/assign-convention"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":["POST"],"schemes":[]},"app_assign_caisse":{"tokens":[["text","/user/assign-caisse"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":["POST"],"schemes":[]},"app_duplicate_user":{"tokens":[["text","/user/duplicate-user"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":["POST"],"schemes":[]},"app_fetch_commandes":{"tokens":[["text","/vente/fetch-commandes"]],"defaults":[],"requirements":[],"hosttokens":[],"methods":["GET"],"schemes":[]}},"prefix":"","host":"localhost","port":"","scheme":"http","locale":""}');

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2JwbmV0Z3V5X3dlYnBhY2staW5qZWN0LXBsdWdpbl9kaXN0X3dlYnBhY2staW5qZWN0LXBsdWdpbl9sb2FkZXJfanNfaWRfd2VicGFjay1pLTMyN2NhNy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQTJJLGdFQUFzQixDQUFDLHdHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBdkssV0FBVUEsSUFBSSxFQUFFQyxPQUFPLEVBQUU7RUFDdEIsSUFBSUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsQ0FBQztFQUN2QixJQUFJLElBQTBDLEVBQUU7SUFDNUM7SUFDQUUsaUNBQU8sRUFBRSxvQ0FBRUQsT0FBTyxDQUFDRyxPQUFPO0FBQUE7QUFBQTtBQUFBLGtHQUFDO0VBQy9CLENBQUMsTUFBTSxFQVdOO0FBQ0wsQ0FBQyxFQUFDLElBQUksRUFBRSxZQUFZO0VBQ2hCLElBQUlHLE9BQU8sR0FBRyxDQUFDLENBQUM7RUFDaEIsWUFBWTtFQUNoQkEsT0FBTyxDQUFDRyxVQUFVLEdBQUcsSUFBSTtFQUN6QkgsT0FBTyxDQUFDSCxPQUFPLEdBQUdHLE9BQU8sQ0FBQ0UsTUFBTSxHQUFHLEtBQUssQ0FBQztFQUN6QyxJQUFJQSxNQUFNLEdBQUcsYUFBZSxZQUFZO0lBQ3BDLFNBQVNBLE1BQU1BLENBQUNFLE9BQU8sRUFBRUMsTUFBTSxFQUFFO01BQzdCLElBQUksQ0FBQ0MsUUFBUSxHQUFHRixPQUFPLElBQUk7UUFBRUcsUUFBUSxFQUFFLEVBQUU7UUFBRUMsTUFBTSxFQUFFLEVBQUU7UUFBRUMsSUFBSSxFQUFFLEVBQUU7UUFBRUMsSUFBSSxFQUFFLEVBQUU7UUFBRUMsTUFBTSxFQUFFLEVBQUU7UUFBRUMsTUFBTSxFQUFFO01BQUcsQ0FBQztNQUNuRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1IsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hDO0lBQ0FILE1BQU0sQ0FBQ1ksV0FBVyxHQUFHLFlBQVk7TUFDN0Is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LEVBQUUsR0FBRyxDQUFDLENBQ3BCQSxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUNwQkEsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDN0IsQ0FBQztJQUNEO0FBQ0o7QUFDQTtJQUNJcEYsTUFBTSxDQUFDK0Usb0JBQW9CLEdBQUcsVUFBVVosS0FBSyxFQUFFO01BQzNDLE9BQU9uRSxNQUFNLENBQUNrRix3QkFBd0IsQ0FBQ2YsS0FBSyxDQUFDLENBQ3hDaUIsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDN0IsQ0FBQztJQUNELE9BQU9wRixNQUFNO0VBQ2pCLENBQUMsQ0FBQyxDQUFFO0VBQ0pGLE9BQU8sQ0FBQ0UsTUFBTSxHQUFHQSxNQUFNO0VBQ3ZCRixPQUFPLENBQUNILE9BQU8sR0FBRyxJQUFJSyxNQUFNLENBQUMsQ0FBQztFQUM5QkYsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHQSxPQUFPLENBQUNILE9BQU87RUFHaEMsT0FBTztJQUFFSyxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTTtJQUFFTCxPQUFPLEVBQUVHLE9BQU8sQ0FBQ0g7RUFBUSxDQUFDO0FBQy9ELENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8iLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL2ZyaWVuZHNvZnN5bWZvbnkvanNyb3V0aW5nLWJ1bmRsZS9SZXNvdXJjZXMvcHVibGljL2pzL3JvdXRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91dGluZyBmcm9tIFwiZm9zLXJvdXRlclwiO2ltcG9ydCByb3V0ZXMgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXFRoaW5rUGFkXFxcXERlc2t0b3BcXFxcbmV3IHVwaGFybWFcXFxcdXBoYXJtYV9zX2hjelxcXFx2YXJcXFxcY2FjaGVcXFxcZm9zUm91dGVzLmpzb25cIjtSb3V0aW5nLnNldFJvdXRpbmdEYXRhKHJvdXRlcyk7IiwiKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XHJcbiAgICB2YXIgcm91dGluZyA9IGZhY3RvcnkoKTtcclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXHJcbiAgICAgICAgZGVmaW5lKFtdLCByb3V0aW5nLlJvdXRpbmcpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxyXG4gICAgICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxyXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJvdXRpbmcuUm91dGluZztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcclxuICAgICAgICByb290LlJvdXRpbmcgPSByb3V0aW5nLlJvdXRpbmc7XHJcbiAgICAgICAgcm9vdC5mb3MgPSB7XHJcbiAgICAgICAgICAgIFJvdXRlcjogcm91dGluZy5Sb3V0ZXJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHBvcnRzID0ge307XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLlJvdXRpbmcgPSBleHBvcnRzLlJvdXRlciA9IHZvaWQgMDtcbnZhciBSb3V0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUm91dGVyKGNvbnRleHQsIHJvdXRlcykge1xuICAgICAgICB0aGlzLmNvbnRleHRfID0gY29udGV4dCB8fCB7IGJhc2VfdXJsOiAnJywgcHJlZml4OiAnJywgaG9zdDogJycsIHBvcnQ6ICcnLCBzY2hlbWU6ICcnLCBsb2NhbGU6ICcnIH07XG4gICAgICAgIHRoaXMuc2V0Um91dGVzKHJvdXRlcyB8fCB7fSk7XG4gICAgfVxuICAgIFJvdXRlci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUm91dGluZztcbiAgICB9O1xuICAgIFJvdXRlci5zZXREYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIHJvdXRlciA9IFJvdXRlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICByb3V0ZXIuc2V0Um91dGluZ0RhdGEoZGF0YSk7XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLnNldFJvdXRpbmdEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5zZXRCYXNlVXJsKGRhdGFbJ2Jhc2VfdXJsJ10pO1xuICAgICAgICB0aGlzLnNldFJvdXRlcyhkYXRhWydyb3V0ZXMnXSk7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS5wcmVmaXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFByZWZpeChkYXRhWydwcmVmaXgnXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLnBvcnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBvcnQoZGF0YVsncG9ydCddKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRhdGEubG9jYWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRMb2NhbGUoZGF0YVsnbG9jYWxlJ10pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0SG9zdChkYXRhWydob3N0J10pO1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEuc2NoZW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRTY2hlbWUoZGF0YVsnc2NoZW1lJ10pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLnNldFJvdXRlcyA9IGZ1bmN0aW9uIChyb3V0ZXMpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXNfID0gT2JqZWN0LmZyZWV6ZShyb3V0ZXMpO1xuICAgIH07XG4gICAgUm91dGVyLnByb3RvdHlwZS5nZXRSb3V0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdXRlc187XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLnNldEJhc2VVcmwgPSBmdW5jdGlvbiAoYmFzZVVybCkge1xuICAgICAgICB0aGlzLmNvbnRleHRfLmJhc2VfdXJsID0gYmFzZVVybDtcbiAgICB9O1xuICAgIFJvdXRlci5wcm90b3R5cGUuZ2V0QmFzZVVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dF8uYmFzZV91cmw7XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLnNldFByZWZpeCA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0Xy5wcmVmaXggPSBwcmVmaXg7XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLnNldFNjaGVtZSA9IGZ1bmN0aW9uIChzY2hlbWUpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0Xy5zY2hlbWUgPSBzY2hlbWU7XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLmdldFNjaGVtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dF8uc2NoZW1lO1xuICAgIH07XG4gICAgUm91dGVyLnByb3RvdHlwZS5zZXRIb3N0ID0gZnVuY3Rpb24gKGhvc3QpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0Xy5ob3N0ID0gaG9zdDtcbiAgICB9O1xuICAgIFJvdXRlci5wcm90b3R5cGUuZ2V0SG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dF8uaG9zdDtcbiAgICB9O1xuICAgIFJvdXRlci5wcm90b3R5cGUuc2V0UG9ydCA9IGZ1bmN0aW9uIChwb3J0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dF8ucG9ydCA9IHBvcnQ7XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLmdldFBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRfLnBvcnQ7XG4gICAgfTtcbiAgICA7XG4gICAgUm91dGVyLnByb3RvdHlwZS5zZXRMb2NhbGUgPSBmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICAgIHRoaXMuY29udGV4dF8ubG9jYWxlID0gbG9jYWxlO1xuICAgIH07XG4gICAgUm91dGVyLnByb3RvdHlwZS5nZXRMb2NhbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRfLmxvY2FsZTtcbiAgICB9O1xuICAgIDtcbiAgICAvKipcbiAgICAgKiBCdWlsZHMgcXVlcnkgc3RyaW5nIHBhcmFtcyBhZGRlZCB0byBhIFVSTC5cbiAgICAgKiBQb3J0IG9mIGpRdWVyeSdzICQucGFyYW0oKSBmdW5jdGlvbiwgc28gY3JlZGl0IGlzIGR1ZSB0aGVyZS5cbiAgICAgKi9cbiAgICBSb3V0ZXIucHJvdG90eXBlLmJ1aWxkUXVlcnlQYXJhbXMgPSBmdW5jdGlvbiAocHJlZml4LCBwYXJhbXMsIGFkZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbmFtZTtcbiAgICAgICAgdmFyIHJicmFja2V0ID0gbmV3IFJlZ0V4cCgvXFxbXFxdJC8pO1xuICAgICAgICBpZiAocGFyYW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAocmJyYWNrZXQudGVzdChwcmVmaXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZChwcmVmaXgsIHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5idWlsZFF1ZXJ5UGFyYW1zKHByZWZpeCArICdbJyArICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyA/IGkgOiAnJykgKyAnXScsIHZhbCwgYWRkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGFyYW1zID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZm9yIChuYW1lIGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRRdWVyeVBhcmFtcyhwcmVmaXggKyAnWycgKyBuYW1lICsgJ10nLCBwYXJhbXNbbmFtZV0sIGFkZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhZGQocHJlZml4LCBwYXJhbXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcmF3IHJvdXRlIG9iamVjdC5cbiAgICAgKi9cbiAgICBSb3V0ZXIucHJvdG90eXBlLmdldFJvdXRlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIHByZWZpeGVkTmFtZSA9IHRoaXMuY29udGV4dF8ucHJlZml4ICsgbmFtZTtcbiAgICAgICAgdmFyIHNmNDFpMThuTmFtZSA9IG5hbWUgKyAnLicgKyB0aGlzLmNvbnRleHRfLmxvY2FsZTtcbiAgICAgICAgdmFyIHByZWZpeGVkU2Y0MWkxOG5OYW1lID0gdGhpcy5jb250ZXh0Xy5wcmVmaXggKyBuYW1lICsgJy4nICsgdGhpcy5jb250ZXh0Xy5sb2NhbGU7XG4gICAgICAgIHZhciB2YXJpYW50cyA9IFtwcmVmaXhlZE5hbWUsIHNmNDFpMThuTmFtZSwgcHJlZml4ZWRTZjQxaTE4bk5hbWUsIG5hbWVdO1xuICAgICAgICBmb3IgKHZhciBpIGluIHZhcmlhbnRzKSB7XG4gICAgICAgICAgICBpZiAodmFyaWFudHNbaV0gaW4gdGhpcy5yb3V0ZXNfKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucm91dGVzX1t2YXJpYW50c1tpXV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcm91dGUgXCInICsgbmFtZSArICdcIiBkb2VzIG5vdCBleGlzdC4nKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyB0aGUgVVJMIGZvciBhIHJvdXRlLlxuICAgICAqL1xuICAgIFJvdXRlci5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiAobmFtZSwgb3B0X3BhcmFtcywgYWJzb2x1dGUpIHtcbiAgICAgICAgdmFyIHJvdXRlID0gKHRoaXMuZ2V0Um91dGUobmFtZSkpO1xuICAgICAgICB2YXIgcGFyYW1zID0gb3B0X3BhcmFtcyB8fCB7fTtcbiAgICAgICAgdmFyIHVudXNlZFBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcyk7XG4gICAgICAgIHZhciB1cmwgPSAnJztcbiAgICAgICAgdmFyIG9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgdmFyIGhvc3QgPSAnJztcbiAgICAgICAgdmFyIHBvcnQgPSAodHlwZW9mIHRoaXMuZ2V0UG9ydCgpID09ICd1bmRlZmluZWQnIHx8IHRoaXMuZ2V0UG9ydCgpID09PSBudWxsKSA/ICcnIDogdGhpcy5nZXRQb3J0KCk7XG4gICAgICAgIHJvdXRlLnRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgaWYgKCd0ZXh0JyA9PT0gdG9rZW5bMF0gJiYgdHlwZW9mIHRva2VuWzFdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHVybCA9IFJvdXRlci5lbmNvZGVQYXRoQ29tcG9uZW50KHRva2VuWzFdKSArIHVybDtcbiAgICAgICAgICAgICAgICBvcHRpb25hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgndmFyaWFibGUnID09PSB0b2tlblswXSkge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5sZW5ndGggPT09IDYgJiYgdG9rZW5bNV0gPT09IHRydWUpIHsgLy8gU2l4dGggcGFydCBvZiB0aGUgdG9rZW4gYXJyYXkgaW5kaWNhdGVzIGlmIGl0IHNob3VsZCBiZSBpbmNsdWRlZCBpbiBjYXNlIG9mIGRlZmF1bHRzXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBoYXNEZWZhdWx0ID0gcm91dGUuZGVmYXVsdHMgJiYgIUFycmF5LmlzQXJyYXkocm91dGUuZGVmYXVsdHMpICYmIHR5cGVvZiB0b2tlblszXSA9PT0gJ3N0cmluZycgJiYgKHRva2VuWzNdIGluIHJvdXRlLmRlZmF1bHRzKTtcbiAgICAgICAgICAgICAgICBpZiAoZmFsc2UgPT09IG9wdGlvbmFsIHx8ICFoYXNEZWZhdWx0IHx8ICgodHlwZW9mIHRva2VuWzNdID09PSAnc3RyaW5nJyAmJiB0b2tlblszXSBpbiBwYXJhbXMpICYmICFBcnJheS5pc0FycmF5KHJvdXRlLmRlZmF1bHRzKSAmJiBwYXJhbXNbdG9rZW5bM11dICE9IHJvdXRlLmRlZmF1bHRzW3Rva2VuWzNdXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuWzNdID09PSAnc3RyaW5nJyAmJiB0b2tlblszXSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyYW1zW3Rva2VuWzNdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB1bnVzZWRQYXJhbXNbdG9rZW5bM11dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0b2tlblszXSA9PT0gJ3N0cmluZycgJiYgaGFzRGVmYXVsdCAmJiAhQXJyYXkuaXNBcnJheShyb3V0ZS5kZWZhdWx0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcm91dGUuZGVmYXVsdHNbdG9rZW5bM11dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSByb3V0ZSBcIicgKyBuYW1lICsgJ1wiIHJlcXVpcmVzIHRoZSBwYXJhbWV0ZXIgXCInICsgdG9rZW5bM10gKyAnXCIuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGVtcHR5ID0gdHJ1ZSA9PT0gdmFsdWUgfHwgZmFsc2UgPT09IHZhbHVlIHx8ICcnID09PSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbXB0eSB8fCAhb3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmNvZGVkVmFsdWUgPSBSb3V0ZXIuZW5jb2RlUGF0aENvbXBvbmVudCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ251bGwnID09PSBlbmNvZGVkVmFsdWUgJiYgbnVsbCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVkVmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHRva2VuWzFdICsgZW5jb2RlZFZhbHVlICsgdXJsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhhc0RlZmF1bHQgJiYgKHR5cGVvZiB0b2tlblszXSA9PT0gJ3N0cmluZycgJiYgdG9rZW5bM10gaW4gdW51c2VkUGFyYW1zKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdW51c2VkUGFyYW1zW3Rva2VuWzNdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdG9rZW4gdHlwZSBcIicgKyB0b2tlblswXSArICdcIiBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHVybCA9PT0gJycpIHtcbiAgICAgICAgICAgIHVybCA9ICcvJztcbiAgICAgICAgfVxuICAgICAgICByb3V0ZS5ob3N0dG9rZW5zLmZvckVhY2goZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBpZiAoJ3RleHQnID09PSB0b2tlblswXSkge1xuICAgICAgICAgICAgICAgIGhvc3QgPSB0b2tlblsxXSArIGhvc3Q7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCd2YXJpYWJsZScgPT09IHRva2VuWzBdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuWzNdIGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcmFtc1t0b2tlblszXV07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB1bnVzZWRQYXJhbXNbdG9rZW5bM11dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyb3V0ZS5kZWZhdWx0cyAmJiAhQXJyYXkuaXNBcnJheShyb3V0ZS5kZWZhdWx0cykgJiYgKHRva2VuWzNdIGluIHJvdXRlLmRlZmF1bHRzKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJvdXRlLmRlZmF1bHRzW3Rva2VuWzNdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaG9zdCA9IHRva2VuWzFdICsgdmFsdWUgKyBob3N0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdXJsID0gdGhpcy5jb250ZXh0Xy5iYXNlX3VybCArIHVybDtcbiAgICAgICAgaWYgKHJvdXRlLnJlcXVpcmVtZW50cyAmJiAoJ19zY2hlbWUnIGluIHJvdXRlLnJlcXVpcmVtZW50cykgJiYgdGhpcy5nZXRTY2hlbWUoKSAhPSByb3V0ZS5yZXF1aXJlbWVudHNbJ19zY2hlbWUnXSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRIb3N0ID0gaG9zdCB8fCB0aGlzLmdldEhvc3QoKTtcbiAgICAgICAgICAgIHVybCA9IHJvdXRlLnJlcXVpcmVtZW50c1snX3NjaGVtZSddICsgJzovLycgKyBjdXJyZW50SG9zdCArIChjdXJyZW50SG9zdC5pbmRleE9mKCc6JyArIHBvcnQpID4gLTEgfHwgJycgPT09IHBvcnQgPyAnJyA6ICc6JyArIHBvcnQpICsgdXJsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2Ygcm91dGUuc2NoZW1lcyAmJiAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHJvdXRlLnNjaGVtZXNbMF0gJiYgdGhpcy5nZXRTY2hlbWUoKSAhPT0gcm91dGUuc2NoZW1lc1swXSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRIb3N0ID0gaG9zdCB8fCB0aGlzLmdldEhvc3QoKTtcbiAgICAgICAgICAgIHVybCA9IHJvdXRlLnNjaGVtZXNbMF0gKyAnOi8vJyArIGN1cnJlbnRIb3N0ICsgKGN1cnJlbnRIb3N0LmluZGV4T2YoJzonICsgcG9ydCkgPiAtMSB8fCAnJyA9PT0gcG9ydCA/ICcnIDogJzonICsgcG9ydCkgKyB1cmw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaG9zdCAmJiB0aGlzLmdldEhvc3QoKSAhPT0gaG9zdCArIChob3N0LmluZGV4T2YoJzonICsgcG9ydCkgPiAtMSB8fCAnJyA9PT0gcG9ydCA/ICcnIDogJzonICsgcG9ydCkpIHtcbiAgICAgICAgICAgIHVybCA9IHRoaXMuZ2V0U2NoZW1lKCkgKyAnOi8vJyArIGhvc3QgKyAoaG9zdC5pbmRleE9mKCc6JyArIHBvcnQpID4gLTEgfHwgJycgPT09IHBvcnQgPyAnJyA6ICc6JyArIHBvcnQpICsgdXJsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFic29sdXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB1cmwgPSB0aGlzLmdldFNjaGVtZSgpICsgJzovLycgKyB0aGlzLmdldEhvc3QoKSArICh0aGlzLmdldEhvc3QoKS5pbmRleE9mKCc6JyArIHBvcnQpID4gLTEgfHwgJycgPT09IHBvcnQgPyAnJyA6ICc6JyArIHBvcnQpICsgdXJsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh1bnVzZWRQYXJhbXMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBxdWVyeVBhcmFtc18xID0gW107XG4gICAgICAgICAgICB2YXIgYWRkID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uIHRoZW4gY2FsbCBpdCBhbmQgYXNzaWduIGl0J3MgcmV0dXJuIHZhbHVlIGFzIHZhbHVlXG4gICAgICAgICAgICAgICAgdmFsdWUgPSAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSA/IHZhbHVlKCkgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgbnVsbCB0byBlbXB0eSBzdHJpbmdcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSA9PT0gbnVsbCkgPyAnJyA6IHZhbHVlO1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zXzEucHVzaChSb3V0ZXIuZW5jb2RlUXVlcnlDb21wb25lbnQoa2V5KSArICc9JyArIFJvdXRlci5lbmNvZGVRdWVyeUNvbXBvbmVudCh2YWx1ZSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIHByZWZpeCBpbiB1bnVzZWRQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodW51c2VkUGFyYW1zLmhhc093blByb3BlcnR5KHByZWZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZFF1ZXJ5UGFyYW1zKHByZWZpeCwgdW51c2VkUGFyYW1zW3ByZWZpeF0sIGFkZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXJsID0gdXJsICsgJz8nICsgcXVlcnlQYXJhbXNfMS5qb2luKCcmJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGdpdmVuIHN0cmluZyBlbmNvZGVkIHRvIG1pbWljIFN5bWZvbnkgVVJMIGdlbmVyYXRvci5cbiAgICAgKi9cbiAgICBSb3V0ZXIuY3VzdG9tRW5jb2RlVVJJQ29tcG9uZW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpXG4gICAgICAgICAgICAucmVwbGFjZSgvJTJGL2csICcvJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8lNDAvZywgJ0AnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyUzQS9nLCAnOicpXG4gICAgICAgICAgICAucmVwbGFjZSgvJTIxL2csICchJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8lM0IvZywgJzsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyUyQy9nLCAnLCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvJTJBL2csICcqJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXCgvZywgJyUyOCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwpL2csICclMjknKVxuICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgJyUyNycpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZ2l2ZW4gcGF0aCBwcm9wZXJseSBlbmNvZGVkIHRvIG1pbWljIFN5bWZvbnkgVVJMIGdlbmVyYXRvci5cbiAgICAgKi9cbiAgICBSb3V0ZXIuZW5jb2RlUGF0aENvbXBvbmVudCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gUm91dGVyLmN1c3RvbUVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC8lM0QvZywgJz0nKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyUyQi9nLCAnKycpXG4gICAgICAgICAgICAucmVwbGFjZSgvJTIxL2csICchJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8lN0MvZywgJ3wnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGdpdmVuIHF1ZXJ5IHBhcmFtZXRlciBvciB2YWx1ZSBwcm9wZXJseSBlbmNvZGVkIHRvIG1pbWljIFN5bWZvbnkgVVJMIGdlbmVyYXRvci5cbiAgICAgKi9cbiAgICBSb3V0ZXIuZW5jb2RlUXVlcnlDb21wb25lbnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFJvdXRlci5jdXN0b21FbmNvZGVVUklDb21wb25lbnQodmFsdWUpXG4gICAgICAgICAgICAucmVwbGFjZSgvJTNGL2csICc/Jyk7XG4gICAgfTtcbiAgICByZXR1cm4gUm91dGVyO1xufSgpKTtcbmV4cG9ydHMuUm91dGVyID0gUm91dGVyO1xuZXhwb3J0cy5Sb3V0aW5nID0gbmV3IFJvdXRlcigpO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLlJvdXRpbmc7XG5cclxuXHJcbiAgICByZXR1cm4geyBSb3V0ZXI6IGV4cG9ydHMuUm91dGVyLCBSb3V0aW5nOiBleHBvcnRzLlJvdXRpbmcgfTtcclxufSkpO1xyIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5Iiwicm91dGluZyIsImRlZmluZSIsImFtZCIsIlJvdXRpbmciLCJtb2R1bGUiLCJfdHlwZW9mIiwiZXhwb3J0cyIsImZvcyIsIlJvdXRlciIsIl9fZXNNb2R1bGUiLCJjb250ZXh0Iiwicm91dGVzIiwiY29udGV4dF8iLCJiYXNlX3VybCIsInByZWZpeCIsImhvc3QiLCJwb3J0Iiwic2NoZW1lIiwibG9jYWxlIiwic2V0Um91dGVzIiwiZ2V0SW5zdGFuY2UiLCJzZXREYXRhIiwiZGF0YSIsInJvdXRlciIsInNldFJvdXRpbmdEYXRhIiwicHJvdG90eXBlIiwic2V0QmFzZVVybCIsInNldFByZWZpeCIsInNldFBvcnQiLCJzZXRMb2NhbGUiLCJzZXRIb3N0Iiwic2V0U2NoZW1lIiwicm91dGVzXyIsIk9iamVjdCIsImZyZWV6ZSIsImdldFJvdXRlcyIsImJhc2VVcmwiLCJnZXRCYXNlVXJsIiwiZ2V0U2NoZW1lIiwiZ2V0SG9zdCIsImdldFBvcnQiLCJnZXRMb2NhbGUiLCJidWlsZFF1ZXJ5UGFyYW1zIiwicGFyYW1zIiwiYWRkIiwiX3RoaXMiLCJuYW1lIiwicmJyYWNrZXQiLCJSZWdFeHAiLCJBcnJheSIsImZvckVhY2giLCJ2YWwiLCJpIiwidGVzdCIsImdldFJvdXRlIiwicHJlZml4ZWROYW1lIiwic2Y0MWkxOG5OYW1lIiwicHJlZml4ZWRTZjQxaTE4bk5hbWUiLCJ2YXJpYW50cyIsIkVycm9yIiwiZ2VuZXJhdGUiLCJvcHRfcGFyYW1zIiwiYWJzb2x1dGUiLCJyb3V0ZSIsInVudXNlZFBhcmFtcyIsImFzc2lnbiIsInVybCIsIm9wdGlvbmFsIiwidG9rZW5zIiwidG9rZW4iLCJlbmNvZGVQYXRoQ29tcG9uZW50IiwibGVuZ3RoIiwiaGFzRGVmYXVsdCIsImRlZmF1bHRzIiwiaXNBcnJheSIsInZhbHVlIiwiZW1wdHkiLCJlbmNvZGVkVmFsdWUiLCJob3N0dG9rZW5zIiwicmVxdWlyZW1lbnRzIiwiY3VycmVudEhvc3QiLCJpbmRleE9mIiwic2NoZW1lcyIsImtleXMiLCJxdWVyeVBhcmFtc18xIiwia2V5IiwicHVzaCIsImVuY29kZVF1ZXJ5Q29tcG9uZW50IiwiaGFzT3duUHJvcGVydHkiLCJqb2luIiwiY3VzdG9tRW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=